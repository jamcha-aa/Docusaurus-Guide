#+OPTIONS: toc:nil
#+OPTIONS: -:nil
#+OPTIONS: ^:{}

---
id: 09
title: 09 - もう読める
sidebar_label: 09 - もう読める 
---

** siteConfig.js

   「 ~siteConfig.js~ は ~index.js~ で使う情報とか，サイトの URL とか，いろいろ書かなきゃいけない」「何か既視感があるな…」「書くべき場所は決まってるからそんなに難しくないよ。私の場合はこんなかんじ」「話がかみあってないぞ…」

   ドン!

   机が大きく揺れる。

   「誰のせいだと思ってるのかな？」「私は読者のことを考えただけだ」「君が余計なこと言ったせいで前回全然進まなかったんじゃん。タイトル詐欺だよ。わかってる？ ~siteConfig.js~ ってページ開いてさ，説明もしないで延々と漫才見せられる人の身にもなってよ」「じゃあ私の言う通りテキパキとやればいいだろう」「わかった。じゃあもう Docusaurus なんてやめてリポジトリに org ファイルだけ置いてく。それで満足でしょ？」「ふてるなよ…」「フテルとは何ですか？」「待って。急に話に入ってこられるとわけわかんなくなる」

   ThinkPad が会話に混ざってくると収拾がつかなくなる。私は不満をこらえて説明に戻ることにした。

   <br>
   #+BEGIN_EXPORT html   
   ```js
   const siteConfig = {
     title: 'Docusaurus の逆襲' /* title for your website */,
       tagline: 'Docusaurus で GitHub と遊ぶ。',
     url: 'https://jamcha-aa.github.io/Docusaurus-Guide/' /* your website url */,
     baseUrl: '/Docusaurus-Guide/' /* base url for your project */,

     // Used for publishing and more
     projectName: 'Docusaurus-Guide',
     organizationName: 'jamcha-aa',
   ```
   #+END_EXPORT

   <br>
   「 ~title~ はサイトの名前， ~tagline~ はサブタイトルとか。 ~projectName~ と ~organizationName~ はそれぞれリポジトリ名とアカウント名。気をつけなきゃいけないのは ~baseUrl~ で， ~index.js~ はこれを見ながら画像とか文書の場所を探すから，正しく設定しないとトップページしか表示してくれなくなる」

   「君がちゃんと説明に戻ってくれて嬉しいよ。ふむ。 ~baseUrl~ に注意ということだな」「そうそう。じゃあちょっと飛ばしてアイコン画像の設定を見よう」

   <br>
   #+BEGIN_EXPORT html
   ```js
     /* path to images for header/footer */
    headerIcon: 'img/jamcha.svg',
    footerIcon: 'img/jamcha.svg',
    favicon: 'img/favicon.png',

    /* colors for website */
    colors: {
      primaryColor: '#b27ee2',
      secondaryColor: '#205C3B',
    },
   ```
   #+END_EXPORT

   <br>
   「このサイトの左上に表示されてるアイコンが ~.svg~ 。favicon はブラウザタブの左に描かれてるやつだね。あと，簡単だけどサイトの色も変えられるよ。 ~primaryColor~ が色ついてるやつ」

   「アイコンのファイルはどこに置くんだ？」「 ~static~ ってフォルダの中に ~img~ っていうのがあるから，そこに置く」

   「文書のなかで表示してきたファイルは？スクリーンショットとか」「 ~docs~ の中に ~assets~ ってフォルダを作って，その中に置く。リンクの書き方は markdown だとこんな感じ」

   <br>
   #+BEGIN_EXPORT html
   ```md
   ![SS1](./assets/SS1.png)
   ```
   #+END_EXPORT

   <br>
   「よし!これで準備オッケー!それじゃあビルド!」

   「なあ，ひとつ聞いておきたいことがあるんだが」「ん？なに？」

   <br>
   「君はこの作業，面倒だとは思わないのか？」

   <br>
   本質的な質問に私の胃がしびれる。どうしてわざわざ GitBook や Docusaurus にしているのか。 [[https://github.github.com/gfm/][GitHub Flavored Markdown]] ではだめなのか。

   「…」私は EeePC が何か言いそうなのを手で止め，少し考えてから口を開いた。

   「… [[https://texwiki.texjp.org/][TeX]] ってさ，すっごくめんどくさいじゃん？なんで斜体にすんのにいちいち ~{\it}~ なんて書かなきゃならないんだー，とかさ」「…ああ」

   「でもがんばって設定して，初めて ~dvipdfmx~ で作った pdf を見たとき，『きれいだ』と思った。あんな記号だらけの文章から，こんなきれいなものができて，こんなきれいな模様を私が作ったんだって思ったら，なんかワクワクして」

   「そうだな。元のファイルからは想像もできない」

   「Docusaurus もそう。きれいだな，すごいなって。はじめは設定とか全然わからなかったけど，今はなんとなくわかるし。自分が成長しているみたいで，楽しいよ」

** ビルド & デプロイ

  「ここまで来たらあとはコマンド 1 個で読めるようになるんだけど」「おお」

  「その前に， [[http://monsat.hatenablog.com/entry/generating-ssh-keys-for-github][SSH の公開鍵を作成して GitHub に登録]] していない人は絶対してください!」

  「…君，それ [[https://jamcha-aa.github.io/Gitbook-Guide/01.html][前にも言った]] な」「絶対してください!」

  「その説明はここではしないんだな」「絶対してください!」

  <br>
  「 [[http://monsat.hatenablog.com/entry/generating-ssh-keys-for-github][SSH の公開鍵を作成して GitHub に登録]] が済んでいたら，ターミナルで ~website~ フォルダに移動して次のコマンドを打ちます」

  #+BEGIN_SRC 
  GIT_USER=<GIT_USER> CURRENT_BRANCH=master USE_SSH=true yarn run publish-gh-pages
  #+END_SRC

  <br>
  「 ~<GIT_USER>~ のところはアカウント名ね。 ~< >~ は入れないくていいよ。あ，あと npm 使ってる人は ~yarn~ のところが ~npm~ になります。少し待つと， ~Website is live at:~ って感じで URL が表示されるはずだから，それがサイトの URL です。以上。おわり」

  「GitHub Pages の設定は要らないのか？」「Docusaurus は自動でやってくれるみたい」「ほう。便利だな」「うん。最初は ~index.js~ とかの設定はがんばらないといけないけど，一旦作ればあとは楽。そこが [[https://docusaurus.io/][Easy to Maintain]] なのかも」

  「ところで，どうしてタイトルが『 Docusaurus の逆襲』なんだ？」

  「試行錯誤しながら [[https://jamcha-aa.github.io/Spacemacs-Guide/][『 Spacemacs のささやき』]] を Docusaurus で書いたとき，そのやり方を忘れないうちにまとめなきゃいけないと思ったから。撃退したはずなのにまた帰ってきたから逆襲」「初めて読んだ人は Docusaurus のすごさをアピールするような作品だと勘違いしないか？」

  「え，すごいじゃん」「どこが？」

  「だって Javascript を一行も書いたことない私でも作れたんだもん」

  <br>
  <br>
  -- 了 --

  <br>
  <br>
  (c) 2018 jamcha (jamcha.aa@gmail.com).
                
  ![[https://i.creativecommons.org/l/by-sa/4.0/88x31.png][cc by-sa]]
